// routing and react
import {
  NotFoundRoute,
  RouterProvider,
  createRouter,
} from "@tanstack/react-router";
import { StrictMode } from "react";
import ReactDOM from "react-dom/client";

// App related config options
import { enableReactTracking } from "@legendapp/state/config/enableReactTracking";
import { configureObservablePersistence } from "@legendapp/state/persist";
import { ObservablePersistLocalStorage } from "@legendapp/state/persist-plugins/local-storage";
import t, { queryClient, trpcClient } from "@shared/config";
import { QueryClientProvider } from "@tanstack/react-query";

// some custom css
// like drag region and scrollbar
import "./App.css";

// track state changes
enableReactTracking({
  auto: true,
});

// persist observables to local
// storage
configureObservablePersistence({
  pluginLocal: ObservablePersistLocalStorage,
});

// tanstack/react-router uses this
// for typesaftey of routes
// do not manually edit the routeTree.gen
// file , it's auto generated by @tanstack/react-router
// https://tanstack.com/router/v1/docs/framework/react/
import { routeTree } from "./routeTree.gen";
import { Route as rootRoute } from "./routes/__root";

// Radix UI Themed components for your app
import { Theme } from "@radix-ui/themes";
import "@radix-ui/themes/styles.css";

// uno css for more granular styles where needed
import "virtual:uno.css";

// not found route , can be customized as needed
const notFoundRoute = new NotFoundRoute({
  getParentRoute: () => rootRoute,
  component: () => "404 not found",
});

// instantiate the tanstack-router
const router = createRouter({ routeTree, notFoundRoute });

// give us access to the types
declare module "@tanstack/react-router" {
  interface Register {
    router: typeof router;
  }
}

const rootElement = document.getElementById("root");

if (!rootElement?.innerHTML) {
  const root = ReactDOM.createRoot(rootElement!);

  // create our app
  root.render(
    <StrictMode>
      <t.Provider client={trpcClient} queryClient={queryClient}>
        <QueryClientProvider client={queryClient}>
          <Theme
            appearance="dark"
            radius="medium"
            accentColor="blue"
            grayColor="slate"
          >
            <RouterProvider router={router} />
          </Theme>
        </QueryClientProvider>
      </t.Provider>
    </StrictMode>,
  );
}
